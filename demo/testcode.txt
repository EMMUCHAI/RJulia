library(rjulia)
#init embedding julia,paraments are julia_home and disable_gc
julia_init("d:/codes/julia32/usr/bin",F)
f=function(n){
 for (i in 1:n)
 {   
  #pass R double vector to Julia
  x<-1.01:5.01
  r_julia(x,"tt")
  #get passed vector from Julia
  y<-julia_eval("tt")
  cat("float vector:",y,"\n")
 

 #pass R int vector to Julia
  x<-1:5
  r_julia(x,"tt")
  #get passed vector from Julia
  y<-julia_eval("tt")
  cat("int vector:",y,"\n")
  
 #pass R int vector to Julia
  x<-c(TRUE,FALSE,TRUE)
  r_julia(x,"ttt")
  yy<-julia_eval("ttt")
  cat("bool vector:",yy,"\n")

  
  x<-1
  r_julia(x,"ss")
  yy<-julia_eval("ss")
  cat("int :",yy,"\n")

  
  
  x<-1.1
  r_julia(x,"ss")
  yy<-julia_eval("ss")
  cat("float :",yy,"\n")

  
  x<-TRUE
  r_julia(x,"ss")
  yy<-julia_eval("ss")
  cat("bool :",yy,"\n")

 
  # pass string vector to julia,need to verify 
  x<-c("tttt","xxxx")
  r_julia(x,"sss")
  yy<-julia_eval("sss")
  cat("string vector :",yy,"\n")
  yy<-julia_eval("sss[1]")
  cat("string :",yy,"\n")
  
  # pass string vector to julia,need to verify
  julia_void_eval('xx=["ttt","xxxx"]')
  y<-julia_eval("xx")
  cat("string vector:",y,"\n")
  y<-julia_eval("xx[1]")
  cat("string:",y,"\n")
  cat("run time is:",i,"\n")
 }  
}
f(1)
f(10)
xdd<-f(10000)